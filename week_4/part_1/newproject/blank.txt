when we do a npm init -y in the folder we want everything to be

we create an environment with a pre initialised 
package.json

which we can modify in future

and we can then alter the script , to make changes
like we did with start: node index.js

then we can do npm run start , and that will run
the index.js file


there are some inbuilt packages that we dont have
to install , we can use that libraries , js
come preloaded with these libraries

and then there are external packages 
that we can npm install to use

and after we add some external packages
notice that they get added in the 
dependencies in our package.json
and the node_module folder becomes very fat

so it is not a good practice
to upload this chunky folder to github


we can just ignore it while uploading or sharing


you will rarely find this folder on any 
github project, as all you need to type is
"npm install" and it will install all the
dependencies, and you can get the node_module
folder locally very easily 

the version is of the form MAJOR.MINOR.PATCH

eg ^5.3.0

the ^ sign tells npm will install any version that is 
compatible with 5.3.0 but less than 6.0.0. 
This includes versions like 
5.3.1, 5.4.0, 5.5.0, etc.


but what about package-lock.json ?
should you commit it to github?

yes , it creates a uniformity by locking 
the versions 


The package-lock.json records the exact
 versions of all dependencies and their 
 dependencies (sub-dependencies) that are
  installed at the time when npm install 
  was run.
Consistency: By locking down these versions,
 package-lock.json ensures that every time 
 someone installs dependencies 
 (e.g., by running npm install), they get the 
 exact same versions of packages. 
 This prevents discrepancies that can arise
  from different versions being installed in
   different environments.